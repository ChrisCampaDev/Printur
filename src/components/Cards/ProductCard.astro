---
interface Props {
    imagen: string;
    title: string;
    description: string;
    buttonText: string;
    slug: string;
}

const { imagen, title, description, buttonText, slug } = Astro.props;
const cardId = `card-${Math.random().toString(36).substr(2, 9)}`;
const modalId = `modal-${Math.random().toString(36).substr(2, 9)}`;
const zoomBtnId = `zoom-${Math.random().toString(36).substr(2, 9)}`;

---

<article id={cardId} class="group bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-all duration-300 border border-gray-100 flex flex-col h-full" data-aos="fade-up">
    <!-- Contenedor de la imagen con efecto hover y botón de zoom -->
    <div class="relative h-64 bg-gradient-to-br from-blue-50 to-blue-100 overflow-hidden">
        <img 
            src={imagen}
            alt={title}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            loading="lazy"
            data-astro-transition-key={`image-${slug}`}
        />
        <!-- Overlay con descripción que aparece al hacer hover -->
        <div class="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-4">
            <div class="text-white">
                <p class="text-sm line-clamp-3">{description}</p>
            </div>
        </div>
    </div>
    
    <!-- Contenido de la tarjeta -->
    <div class="p-4 flex-1 flex flex-col">
        <h2 class="text-lg font-bold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors" data-astro-transition-key={`title-${slug}`}>{title}</h2>
        <div class="mt-auto">
            <a 
                href={`/producto/${slug}`}
                class="block w-full mt-2 px-4 py-2 text-center bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
                {buttonText}
            </a>
        </div>
    </div>
    
    <!-- Modal para la imagen en tamaño completo -->
    <div 
        id={modalId}
        class="hidden fixed inset-0 z-50 overflow-auto bg-black/90 p-4"
        role="dialog"
        aria-modal="true"
        aria-labelledby={`${modalId}-title`}
        aria-describedby={`${modalId}-desc`}
        tabindex="-1"
    >
        <div class="relative w-full h-full flex items-center justify-center">
            <button 
                type="button" 
                class="absolute top-4 right-4 text-white hover:text-gray-300 focus:outline-none focus:ring-2 focus:ring-white rounded-full p-1"
                aria-label="Cerrar modal"
                data-close-modal
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                <span class="sr-only">Cerrar modal</span>
            </button>
            
            <div class="relative max-w-4xl w-full max-h-[90vh] flex flex-col">
                <div class="relative flex-1 overflow-hidden rounded-lg bg-black">
                    <img 
                        src={imagen}
                        alt=""
                        class="w-full h-auto max-h-[70vh] object-contain"
                        aria-hidden="true"
                    />
                    <div id={`${modalId}-content`} class="bg-black/70 text-white p-4">
                        <h2 id={`${modalId}-title`} class="text-xl font-bold mb-2">{title}</h2>
                        <p id={`${modalId}-desc`} class="text-gray-200">{description}</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Esperar a que el DOM esté completamente cargado
        document.addEventListener('astro:page-load', () => {
            const card = document.getElementById('${cardId}');
            const zoomBtn = document.getElementById('${zoomBtnId}');
            const modal = document.getElementById('${modalId}');
            
            if (!card || !zoomBtn || !modal) return;
            
            const closeBtn = modal.querySelector('[data-close-modal]');
            const focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
            let firstFocusableElement: HTMLElement | null = null, 
                lastFocusableElement: HTMLElement | null = null;
            
            // Función para abrir el modal
            const openModal = () => {
                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
                
                // Enfocar el primer elemento enfocable
                const focusableContent = Array.from(modal.querySelectorAll<HTMLElement>(focusableElements)).filter(el => el.offsetParent !== null); // Filter out hidden elements
                firstFocusableElement = focusableContent[0] || null;
                lastFocusableElement = focusableContent[focusableContent.length - 1] || null;
                firstFocusableElement.focus();
                
                // Agregar evento de teclado para el trap de foco
                modal.addEventListener('keydown', trapFocus);
                
                // Actualizar estado ARIA
                zoomBtn.setAttribute('aria-expanded', 'true');
                modal.removeAttribute('inert');
                modal.setAttribute('aria-hidden', 'false');
            };
            
            // Función para cerrar el modal
            const closeModal = () => {
                modal.classList.add('hidden');
                document.body.style.overflow = 'auto';
                
                // Enfocar el botón que abrió el modal
                zoomBtn.focus();
                
                // Remover evento de teclado
                modal.removeEventListener('keydown', trapFocus);
                
                // Actualizar estado ARIA
                zoomBtn.setAttribute('aria-expanded', 'false');
                modal.setAttribute('inert', '');
                modal.setAttribute('aria-hidden', 'true');
            };
            
            // Función para atrapar el foco dentro del modal
            const trapFocus = (e: KeyboardEvent) => {
                if (e.key !== 'Tab' || !firstFocusableElement || !lastFocusableElement) return;
                
                const activeElement = document.activeElement;
                
                if (e.shiftKey) {
                    if (activeElement === firstFocusableElement) {
                        e.preventDefault();
                        lastFocusableElement.focus();
                    }
                } else {
                    if (activeElement === lastFocusableElement) {
                        e.preventDefault();
                        firstFocusableElement.focus();
                    }
                }
                
                // Handle Escape key press to close modal
                if ((e as KeyboardEvent).key === 'Escape') {
                    closeModal();
                }
            };
            
            // Event Listeners
            zoomBtn.addEventListener('click', openModal);
            
            if (closeBtn) {
                closeBtn.addEventListener('click', closeModal);
            }
            
            // Cerrar al hacer clic fuera del contenido del modal
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeModal();
                }
            });
            
            // Inicializar el modal como accesible
            modal.setAttribute('aria-hidden', 'true');
            modal.setAttribute('inert', '');
            
            // Manejar cambios en la visibilidad del modal
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.attributeName === 'class') {
                        const isHidden = modal.classList.contains('hidden');
                        document.documentElement.style.overflow = isHidden ? '' : 'hidden';
                        modal.setAttribute('aria-hidden', isHidden ? 'true' : 'false');
                        
                        if (isHidden) {
                            modal.setAttribute('inert', '');
                        } else {
                            modal.removeAttribute('inert');
                        }
                    }
                });
            });
            
            observer.observe(modal, {
                attributes: true,
                attributeFilter: ['class']
            });
            
            // Limpiar al desmontar el componente
            return () => {
                observer.disconnect();
                modal.removeEventListener('keydown', trapFocus);
                zoomBtn.removeEventListener('click', openModal);
                if (closeBtn) closeBtn.removeEventListener('click', closeModal);
                modal.removeEventListener('click', closeModal);
            };
        });
    </script>
</article>